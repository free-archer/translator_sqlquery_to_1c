Процедура ПрочитатьТЖ(ФайлТЖ, Замер) Экспорт
	Попытка
		ЗаписьЖурналаРегистрации("ЧтениеЖурналаРегистрации.ЧтениеНачато");
		ИмяВрФайла = ПолучитьИмяВременногоФайла("log");

		Шаблон= "(\w+)\.log$";
		ИмяФайлаТЖ= РегулярныеВыражения.RegExp(Шаблон, ФайлТЖ);

		Год = Число(Лев(ИмяФайлаТЖ, 2));
		Месяц = Число(Сред(ИмяФайлаТЖ, 3, 2));
		День = Число(Сред(ИмяФайлаТЖ, 5, 2));
		Час = Число(Прав(ИмяФайлаТЖ, 2));
		ДатаФайла = Дата(Год + 2000, Месяц, День, Час, 0, 0);

		ЗамерОбъект= Замер.ПолучитьОбъект();
		Замер.Даталога= ДатаФайла;
		ЗамерОбъект.Записать();

		КопироватьФайл(ФайлТЖ.ПолноеИмя, ИмяВрФайла);
					
		//РазобратьФайл(ИмяВрФайла);

		УдалитьФайлы(ИмяВрФайла);
	Исключение
		ЗаписьЖурналаРегистрации("ЧтениеЖурналаРегистрации.ЧтениеПрервано");
		ВызватьИсключение;
	КонецПопытки;

	ЗаписьЖурналаРегистрации("ЧтениеЖурналаРегистрации.ЧтениеЗавершено");
КонецПроцедуры // ПрочитатьЖурнал 

Процедура РазобратьФайл(ИмяФайлаДляРазбора)
	Текст = Новый ЧтениеТекста(ИмяФайлаДляРазбора, КодировкаТекста.UTF8, Символы.ВК + Символы.ПС, "", Ложь);
	СтрокаТекста = Текст.ПрочитатьСтроку();
	Анализатор = Новый COMОбъект("VBScript.RegExp");
	Анализатор.Global = Истина;
	Анализатор.Pattern = "([0-9]{2}):([0-9]{2})\.([0-9]+)\-([0-9]+)\,(\w+)\,(\d+)";
	АнализаторСвойств = Новый COMОбъект("VBScript.RegExp");
	АнализаторСвойств.Global = Истина;
	АнализаторСвойств.Pattern = ",([A-Za-z0-9_А-Яа-я:]+)=([^,]+)";
	АнализаторКавычек = Новый COMОбъект("VBScript.RegExp");
	АнализаторКавычек.Global = Истина;
	КэшСобытий = Новый Соответствие;
	КэшСвойств = Новый Соответствие;
	КэшПроцессов = Новый Соответствие;
	НаборЗаписей = РегистрыСведений.Журнал.СоздатьНаборЗаписей();
	ПроцессСсылка = ПолучитьПроцесс(Процесс, КэшПроцессов);
	
	НаборЗаписей.Отбор.Процесс.Значение = ПроцессСсылка;
	НаборЗаписей.Отбор.Процесс.Использование = Истина;
	НаборЗаписей.Отбор.ПроцессID.Значение = ПроцессID;
	НаборЗаписей.Отбор.ПроцессID.Использование = Истина;
	НаборЗаписей.Отбор.ПериодФайла.Значение = Период;
	НаборЗаписей.Отбор.ПериодФайла.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписейСвойств = РегистрыСведений.СвойстваСобытия.СоздатьНаборЗаписей();
	НаборЗаписейСвойств.Отбор.Процесс.Значение = ПолучитьПроцесс(Процесс, КэшПроцессов);
	НаборЗаписейСвойств.Отбор.Процесс.Использование = Истина;
	НаборЗаписейСвойств.Отбор.ПроцессID.Значение = ПроцессID;
	НаборЗаписейСвойств.Отбор.ПроцессID.Использование = Истина;
	НаборЗаписейСвойств.Отбор.ПериодФайла.Значение = Период;
	НаборЗаписейСвойств.Отбор.ПериодФайла.Использование = Истина;
	НаборЗаписейСвойств.Прочитать();
	БылаЗаписьНабора = Ложь;
	ПрочитаноРазмер = 0;
	СтруктураСостояния = Новый Структура("Прочитано");
	ПрочитаноСтрок = 0;
	РазобраноСтрок = 0;

	МенеджерЗаписи = РегистрыСведений.ГраницыЧтенияДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Процесс = ПроцессСсылка;
	МенеджерЗаписи.ПроцессID = ПроцессID;
	МенеджерЗаписи.Прочитать();

	Пока СтрокаТекста <> Неопределено Цикл

		ПрочитаноРазмер = ПрочитаноРазмер + СтрДлина(СтрокаТекста);
		ПрочитаноСтрок = ПрочитаноСтрок + 1;
		
		// Проверяем, является ли следующая строка начальной строкой журнала
		СледующаяСтрока = Текст.ПрочитатьСтроку();
		Если СледующаяСтрока <> Неопределено Тогда
			Совпадения = Анализатор.Execute(СледующаяСтрока);
			Если Совпадения.Count() = 0 Тогда
				// если следующая строка не соответствует шаблону - добавляем ее к текущей строке и пытаемся распознать объединенную часть
				СтрокаТекста = СтрокаТекста + СледующаяСтрока;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если строка была прочитана ранее - пропускаем процесс анализа
		Если ПрочитаноСтрок <= МенеджерЗаписи.ПрочитаноСтрок Тогда
			СтрокаТекста = СледующаяСтрока;
			Продолжить;
		КонецЕсли;

		Совпадения = Анализатор.Execute(СтрокаТекста);
		Если Совпадения.Count() = 1 Тогда
			Совпадение = Совпадения.Item(0);
			Минуты = Число(Совпадение.SubMatches.Item(0));
			Секунды = Число(Совпадение.SubMatches.Item(1));
			ДолиСекунды = Число(Совпадение.SubMatches.Item(2));
			Длительность = Число(Совпадение.SubMatches.Item(3));
			ИмяСобытия = Совпадение.SubMatches.Item(4);
			УровеньСобытия = Совпадение.SubMatches.Item(5);
		Иначе
			ВызватьИсключение "Нет соответствия шаблону! " + СтрокаТекста;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Запись.Процесс = ПолучитьПроцесс(Процесс, КэшПроцессов);
		Запись.ПроцессID = ПроцессID;
		Запись.ПериодФайла = Период;
		Запись.ПериодСобытия = Период + Секунды + (Минуты * 60);
		Запись.ДоляПериода = Число(ДолиСекунды);
		Запись.Событие = ПолучитьСобытие(ИмяСобытия, КэшСобытий);
		Запись.Уровень = Число(УровеньСобытия);
		Запись.Длительность = Число(Длительность);
		КлючСобытия = Новый УникальныйИдентификатор;
		Запись.КлючСобытия = КлючСобытия;
		СтрокаСвойств = СтрокаТекста;
		ПараметрыСвертки = Новый Структура;
		СвернутьКавычки(АнализаторКавычек, СтрокаСвойств, ПараметрыСвертки);
		Совпадения = АнализаторСвойств.Execute(СтрокаСвойств);
		Если Совпадения.Count() <> 0 Тогда
			
			// Масив имен свойств, необходим для устранения странного бага: иногда в ТЖ встречаются в одной строке два одинаковых свойства
			МассивСвойств = Новый Массив;

			Для Сч = 0 По Совпадения.Count() - 1 Цикл
				Совпадение = Совпадения.Item(Сч);
				ИмяСвойства = Совпадение.SubMatches.Item(0);
				Если МассивСвойств.Найти(ИмяСвойства) = Неопределено Тогда
					ЗначениеСвойства = Совпадение.SubMatches.Item(1);
					РазвернутьКавычки(АнализаторКавычек, ЗначениеСвойства, ПараметрыСвертки);
					ЗаписьСвойства = НаборЗаписейСвойств.Добавить();
					ЗаписьСвойства.Процесс = Запись.Процесс;
					ЗаписьСвойства.ПроцессID = ПроцессID;
					ЗаписьСвойства.ПериодФайла = Период;
					ЗаписьСвойства.КлючСобытия = КлючСобытия;
					ЗаписьСвойства.Свойство = ПолучитьСвойство(ИмяСвойства, КэшСвойств);
					ЗаписьСвойства.ЗначениеСвойства = ЗначениеСвойства;
					МассивСвойств.Добавить(ИмяСвойства);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		Если НаборЗаписей.Количество() > 1000 Тогда
			Если БылаЗаписьНабора Тогда
				НаборЗаписей.Записать(Ложь);
				НаборЗаписейСвойств.Записать(Ложь);
			Иначе
				НаборЗаписей.Записать(Истина);
				НаборЗаписейСвойств.Записать(Истина);
			КонецЕсли;
			НаборЗаписей.Очистить();
			НаборЗаписейСвойств.Очистить();
			БылаЗаписьНабора = Истина;
		КонецЕсли;
		СтрокаТекста = СледующаяСтрока;
		РазобраноСтрок = РазобраноСтрок + 1;
	КонецЦикла;
	Если БылаЗаписьНабора Тогда
		НаборЗаписей.Записать(Ложь);
		НаборЗаписейСвойств.Записать(Ложь);
	Иначе
		НаборЗаписей.Записать(Истина);
		НаборЗаписейСвойств.Записать(Истина);
	КонецЕсли;
	Текст.Закрыть();
	
	// Обвновление инфорации о количестве прочитанных строк
	МенеджерЗаписи.ПрочитаноСтрок = ПрочитаноСтрок;
	МенеджерЗаписи.Записать(Истина);

	Сообщить(РазобраноСтрок);
КонецПроцедуры